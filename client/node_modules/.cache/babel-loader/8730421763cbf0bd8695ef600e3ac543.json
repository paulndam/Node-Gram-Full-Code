{"ast":null,"code":"import axios from \"axios\";\n\nconst create = async (params, credentials, post) => {\n  try {\n    let response = await fetch(`${process.env.REACT_APP_API}/api/posts/new/${params.userId}`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${credentials.t}`\n      },\n      body: post\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst listByUser = async (params, credentials) => {\n  try {\n    let response = await fetch(`${process.env.REACT_APP_API}/api/posts/by/${params.userId}`, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${credentials.t}`\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(\"---error fetching list of for one user  api in the client side --\");\n    console.log(err);\n  }\n};\n\nconst listNewsFeed = async (params, credentials, signal) => {\n  try {\n    let response = await fetch(`${process.env.REACT_APP_API}/api/posts/feed/${params.userId}`, {\n      method: \"GET\",\n      signal: signal,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + credentials.t\n      }\n    });\n    console.log(\"---response from getting news feed ---\", response);\n    return await response.json();\n  } catch (err) {\n    console.log(\"---error fetching list new feed from post api in the client side --\");\n    console.log(err);\n  }\n};\n\nconst remove = async (params, credentials) => {\n  try {\n    let response = await fetch(`${process.env.REACT_APP_API}/api/posts/${params.postId}`, {\n      method: \"DELETE\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${credentials.t}`\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(\"---error removing post from post api in the client side --\");\n    console.log(err);\n  }\n};\n\nconst like = async (params, credentials, postId) => {\n  try {\n    let response = await fetch(`${process.env.REACT_APP_API}/api/posts/like`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${credentials.t}`\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId: postId\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(\"---error liking post from post api in the client side --\");\n    console.log(err);\n  }\n}; // const unlike = async (params, credentials, postId) => {\n//   try {\n//     let response = await fetch(`${process.env.REACT_APP_API}/api/posts/unlike`, {\n//       method: \"PUT\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//         Authorization: `Bearer ${credentials.t}`,\n//       },\n//       body: JSON.stringify({ userId: params.userId, postId: postId }),\n//     });\n//     return await response.json();\n//   } catch (err) {\n//     console.log(\"---error unliking post from post api in the client side --\");\n//     console.log(err);\n//   }\n// };\n\n\nconst unlike = async (params, credentials, postId) => {\n  try {\n    let response = await fetch(`${process.env.REACT_APP_API}/api/posts/unlike`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId: postId\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst comment = async (params, credentials, postId, comment) => {\n  try {\n    let response = await fetch(`${process.env.REACT_APP_API}/api/posts/comment`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${credentials.t}`\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId: postId,\n        comment: comment\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(\"---error commenting post from post api in the client side --\");\n    console.log(err);\n  }\n};\n\nconst unComment = async (params, credentials, postId, comment) => {\n  try {\n    let response = await fetch(`${process.env.REACT_APP_API}/api/posts/uncomment`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${credentials.t}`\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId: postId,\n        comment: comment\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(\"---error un-commenting post from post api in the client side --\");\n    console.log(err);\n  }\n};\n\nexport { listNewsFeed, listByUser, create, remove, like, unlike, comment, unComment };","map":{"version":3,"sources":["/Users/paulndam/Documents/Node-Js/Sample-Mern/client/src/api/PostApi/postApi.js"],"names":["axios","create","params","credentials","post","response","fetch","process","env","REACT_APP_API","userId","method","headers","Accept","Authorization","t","body","json","err","console","log","listByUser","listNewsFeed","signal","remove","postId","like","JSON","stringify","unlike","comment","unComment"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst create = async (params, credentials, post) => {\n  try {\n    let response = await fetch(\n      `${process.env.REACT_APP_API}/api/posts/new/${params.userId}`,\n      {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${credentials.t}`,\n        },\n        body: post,\n      }\n    );\n\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst listByUser = async (params, credentials) => {\n  try {\n    let response = await fetch(\n      `${process.env.REACT_APP_API}/api/posts/by/${params.userId}`,\n      {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${credentials.t}`,\n        },\n      }\n    );\n\n    return await response.json();\n  } catch (err) {\n    console.log(\n      \"---error fetching list of for one user  api in the client side --\"\n    );\n    console.log(err);\n  }\n};\n\nconst listNewsFeed = async (params, credentials, signal) => {\n  try {\n    let response = await fetch(\n      `${process.env.REACT_APP_API}/api/posts/feed/${params.userId}`,\n      {\n        method: \"GET\",\n        signal: signal,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + credentials.t,\n        },\n      }\n    );\n    console.log(\"---response from getting news feed ---\", response);\n    return await response.json();\n  } catch (err) {\n    console.log(\n      \"---error fetching list new feed from post api in the client side --\"\n    );\n    console.log(err);\n  }\n};\n\nconst remove = async (params, credentials) => {\n  try {\n    let response = await fetch(\n      `${process.env.REACT_APP_API}/api/posts/${params.postId}`,\n      {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${credentials.t}`,\n        },\n      }\n    );\n\n    return await response.json();\n  } catch (err) {\n    console.log(\"---error removing post from post api in the client side --\");\n    console.log(err);\n  }\n};\n\nconst like = async (params, credentials, postId) => {\n  try {\n    let response = await fetch(`${process.env.REACT_APP_API}/api/posts/like`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${credentials.t}`,\n      },\n      body: JSON.stringify({ userId: params.userId, postId: postId }),\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(\"---error liking post from post api in the client side --\");\n    console.log(err);\n  }\n};\n\n// const unlike = async (params, credentials, postId) => {\n//   try {\n//     let response = await fetch(`${process.env.REACT_APP_API}/api/posts/unlike`, {\n//       method: \"PUT\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//         Authorization: `Bearer ${credentials.t}`,\n//       },\n//       body: JSON.stringify({ userId: params.userId, postId: postId }),\n//     });\n//     return await response.json();\n//   } catch (err) {\n//     console.log(\"---error unliking post from post api in the client side --\");\n//     console.log(err);\n//   }\n// };\n\nconst unlike = async (params, credentials, postId) => {\n  try {\n    let response = await fetch(\n      `${process.env.REACT_APP_API}/api/posts/unlike`,\n      {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + credentials.t,\n        },\n        body: JSON.stringify({ userId: params.userId, postId: postId }),\n      }\n    );\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst comment = async (params, credentials, postId, comment) => {\n  try {\n    let response = await fetch(\n      `${process.env.REACT_APP_API}/api/posts/comment`,\n      {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${credentials.t}`,\n        },\n        body: JSON.stringify({\n          userId: params.userId,\n          postId: postId,\n          comment: comment,\n        }),\n      }\n    );\n\n    return await response.json();\n  } catch (err) {\n    console.log(\"---error commenting post from post api in the client side --\");\n    console.log(err);\n  }\n};\n\nconst unComment = async (params, credentials, postId, comment) => {\n  try {\n    let response = await fetch(\n      `${process.env.REACT_APP_API}/api/posts/uncomment`,\n      {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${credentials.t}`,\n        },\n        body: JSON.stringify({\n          userId: params.userId,\n          postId: postId,\n          comment: comment,\n        }),\n      }\n    );\n    return await response.json();\n  } catch (err) {\n    console.log(\n      \"---error un-commenting post from post api in the client side --\"\n    );\n    console.log(err);\n  }\n};\n\nexport {\n  listNewsFeed,\n  listByUser,\n  create,\n  remove,\n  like,\n  unlike,\n  comment,\n  unComment,\n};\n"]},"metadata":{},"sourceType":"module"}